//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Weather.Services {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/Services")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LocationInfo", Namespace="http://schemas.datacontract.org/2004/07/Services")]
    [System.SerializableAttribute()]
    public partial class LocationInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LatitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LongitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ZipCodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((object.ReferenceEquals(this.LatitudeField, value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((object.ReferenceEquals(this.LongitudeField, value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ZipCode {
            get {
                return this.ZipCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ZipCodeField, value) != true)) {
                    this.ZipCodeField = value;
                    this.RaisePropertyChanged("ZipCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="News", Namespace="http://schemas.datacontract.org/2004/07/Services")]
    [System.SerializableAttribute()]
    public partial class News : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] TitlesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] URLsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Titles {
            get {
                return this.TitlesField;
            }
            set {
                if ((object.ReferenceEquals(this.TitlesField, value) != true)) {
                    this.TitlesField = value;
                    this.RaisePropertyChanged("Titles");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] URLs {
            get {
                return this.URLsField;
            }
            set {
                if ((object.ReferenceEquals(this.URLsField, value) != true)) {
                    this.URLsField = value;
                    this.RaisePropertyChanged("URLs");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CurrentLocation", Namespace="http://schemas.datacontract.org/2004/07/Services")]
    [System.SerializableAttribute()]
    public partial class CurrentLocation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ZipCodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ZipCode {
            get {
                return this.ZipCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ZipCodeField, value) != true)) {
                    this.ZipCodeField = value;
                    this.RaisePropertyChanged("ZipCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Services.IServices")]
    public interface IServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/SignUp", ReplyAction="http://tempuri.org/IServices/SignUpResponse")]
        bool SignUp(Weather.Services.User newUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/SignUp", ReplyAction="http://tempuri.org/IServices/SignUpResponse")]
        System.Threading.Tasks.Task<bool> SignUpAsync(Weather.Services.User newUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/Login", ReplyAction="http://tempuri.org/IServices/LoginResponse")]
        bool Login(Weather.Services.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/Login", ReplyAction="http://tempuri.org/IServices/LoginResponse")]
        System.Threading.Tasks.Task<bool> LoginAsync(Weather.Services.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/GenerateCaptchaImage", ReplyAction="http://tempuri.org/IServices/GenerateCaptchaImageResponse")]
        byte[] GenerateCaptchaImage();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/GenerateCaptchaImage", ReplyAction="http://tempuri.org/IServices/GenerateCaptchaImageResponse")]
        System.Threading.Tasks.Task<byte[]> GenerateCaptchaImageAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/GetText", ReplyAction="http://tempuri.org/IServices/GetTextResponse")]
        string GetText();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/GetText", ReplyAction="http://tempuri.org/IServices/GetTextResponse")]
        System.Threading.Tasks.Task<string> GetTextAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/SolarIntensity", ReplyAction="http://tempuri.org/IServices/SolarIntensityResponse")]
        decimal SolarIntensity(decimal latitude, decimal longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/SolarIntensity", ReplyAction="http://tempuri.org/IServices/SolarIntensityResponse")]
        System.Threading.Tasks.Task<decimal> SolarIntensityAsync(decimal latitude, decimal longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/GetLocationInfo", ReplyAction="http://tempuri.org/IServices/GetLocationInfoResponse")]
        Weather.Services.LocationInfo GetLocationInfo(string zipcode, string latitude, string longitude, string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/GetLocationInfo", ReplyAction="http://tempuri.org/IServices/GetLocationInfoResponse")]
        System.Threading.Tasks.Task<Weather.Services.LocationInfo> GetLocationInfoAsync(string zipcode, string latitude, string longitude, string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/GetNews", ReplyAction="http://tempuri.org/IServices/GetNewsResponse")]
        Weather.Services.News GetNews(string searchString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/GetNews", ReplyAction="http://tempuri.org/IServices/GetNewsResponse")]
        System.Threading.Tasks.Task<Weather.Services.News> GetNewsAsync(string searchString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/currLoc", ReplyAction="http://tempuri.org/IServices/currLocResponse")]
        Weather.Services.CurrentLocation currLoc();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/currLoc", ReplyAction="http://tempuri.org/IServices/currLocResponse")]
        System.Threading.Tasks.Task<Weather.Services.CurrentLocation> currLocAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/MemberValidation", ReplyAction="http://tempuri.org/IServices/MemberValidationResponse")]
        bool MemberValidation(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServices/MemberValidation", ReplyAction="http://tempuri.org/IServices/MemberValidationResponse")]
        System.Threading.Tasks.Task<bool> MemberValidationAsync(string username, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicesChannel : Weather.Services.IServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServicesClient : System.ServiceModel.ClientBase<Weather.Services.IServices>, Weather.Services.IServices {
        
        public ServicesClient() {
        }
        
        public ServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool SignUp(Weather.Services.User newUser) {
            return base.Channel.SignUp(newUser);
        }
        
        public System.Threading.Tasks.Task<bool> SignUpAsync(Weather.Services.User newUser) {
            return base.Channel.SignUpAsync(newUser);
        }
        
        public bool Login(Weather.Services.User user) {
            return base.Channel.Login(user);
        }
        
        public System.Threading.Tasks.Task<bool> LoginAsync(Weather.Services.User user) {
            return base.Channel.LoginAsync(user);
        }
        
        public byte[] GenerateCaptchaImage() {
            return base.Channel.GenerateCaptchaImage();
        }
        
        public System.Threading.Tasks.Task<byte[]> GenerateCaptchaImageAsync() {
            return base.Channel.GenerateCaptchaImageAsync();
        }
        
        public string GetText() {
            return base.Channel.GetText();
        }
        
        public System.Threading.Tasks.Task<string> GetTextAsync() {
            return base.Channel.GetTextAsync();
        }
        
        public decimal SolarIntensity(decimal latitude, decimal longitude) {
            return base.Channel.SolarIntensity(latitude, longitude);
        }
        
        public System.Threading.Tasks.Task<decimal> SolarIntensityAsync(decimal latitude, decimal longitude) {
            return base.Channel.SolarIntensityAsync(latitude, longitude);
        }
        
        public Weather.Services.LocationInfo GetLocationInfo(string zipcode, string latitude, string longitude, string city) {
            return base.Channel.GetLocationInfo(zipcode, latitude, longitude, city);
        }
        
        public System.Threading.Tasks.Task<Weather.Services.LocationInfo> GetLocationInfoAsync(string zipcode, string latitude, string longitude, string city) {
            return base.Channel.GetLocationInfoAsync(zipcode, latitude, longitude, city);
        }
        
        public Weather.Services.News GetNews(string searchString) {
            return base.Channel.GetNews(searchString);
        }
        
        public System.Threading.Tasks.Task<Weather.Services.News> GetNewsAsync(string searchString) {
            return base.Channel.GetNewsAsync(searchString);
        }
        
        public Weather.Services.CurrentLocation currLoc() {
            return base.Channel.currLoc();
        }
        
        public System.Threading.Tasks.Task<Weather.Services.CurrentLocation> currLocAsync() {
            return base.Channel.currLocAsync();
        }
        
        public bool MemberValidation(string username, string password) {
            return base.Channel.MemberValidation(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> MemberValidationAsync(string username, string password) {
            return base.Channel.MemberValidationAsync(username, password);
        }
    }
}
